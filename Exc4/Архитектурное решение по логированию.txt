Задание 4. Логирование

Сбор логов планируется осуществлять с API компонентов обозначенных на схеме красным.
  
Уровнь INFO для сбора информации о работающих блоках.

Shop API
Авторизация Customer. Логируем дату, идентификатор покупателя.
Создание заказа. Дата, идентификатор пользователя, номер заказа.
Сохраненние 3д модели в хранилище. Дата, идентификатор пользователя, номер заказа.
Смена статуса заказа. Дата, идентификатор пользователя, номер заказа, статус заказа.

CRM
Авторизация Seller. Логируем дату, идентификатор покупателя.
Смена статуса заказа. Дата, идентификатор субъекта, номер заказа, статус заказа.
Отправка сообщения в RabbitMQ. Дата, тип сообщения, идентификатор сущности.
Получение сообщения из RabbitMQ. Дата, тип сообщения, идентификатор сущности.

MES
Получение сообщения из RabbitMQ. Дата, тип сообщения, идентификатор сущности.
Смена статуса заказа. Дата, идентификатор субъекта, номер заказа, статус заказа.
Отправка сообщения в RabbitMQ. Дата, тип сообщения, идентификатор сущности.
Чтение 3д модели из хранилище. Дата, идентификатор субъекта, номер заказа. 

Уровень Warn
Неуспешная авторизация Пользователя в любой системе. Логируем дату, идентификатор покупателя.

Уровень Error
При исключительных ситуациях которые выходят за рамки планиреумого workflow. 
  Начиная от старта работы приложения, до проблем со взаимодействием с базой данных или очередью сообщений.
Проблемы работы со сторонними сервисами.
При запросе данных их файлового хранилища по Id,если файл не найден.
При получении информации/смена статуса заказа, если заказ не найден в системе.

 
«Мотивация» 
 - Оперативное информаирование о сбоях в работе приложения.
 - Наличие данных об ошибке в быстром доступе.

Для бизнеса
 - Уменьшится время на решение проблем. Это скажеться на отношении клиентов к продукту.

Логи уровня Error должным отображаться на dashboards ежедневного просмотра.

В первую очередь нужно обеспечить логирование смены статуса заказов на всех этапах.
Это обеспечит сведенями об основном ходе работы сисетмы приносящей максимальну выгоду компании и сужая поиски проблемных мест.


«Предлагаемое решение».
На схеме добавляются элементы сбора, хранения и инсутрменты мониторинга логов.
Для Java прилодение Logback  будет сохранять логи в файл или передовать в консоль.
Для .Net это будет Serilog.
Далее эти логи будут сбоираться и передаваться Logstash в Elastic.
Чрез интерфейс Kibana можно будет полуить отображение и фильтрацию логов.
Дополнительно, можно будет настрить алертинг при первышения числа ошибок за опеределенное время, отправкой сообщений на электронную почту.
PostgreSQL и RabbitMQ тоже можно настроить на передачу логов в ELsatic при появлении ошибок.

Политика безопасности в отношении логов.
Разделение по по средам разработки Dev, Test,PRod можно булет разграничить доступ к важным данным.
Так доступ — как будет происходить работа с чувствительными данными,
 Доступ к логам Prod среды останется у тим лидов разработки. 

Срок хранения логов будет в два месяца будет достаточным посокльку изготовление заказа может занять около месяца,
 то причины задержок могут крыться в событиях произошедших при создании заказа.

