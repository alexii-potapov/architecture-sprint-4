Задание 3. Трейсинг

Отслдеить требуется полный путь прохождения заказа от создания до отправки курьером проходя через все три сервиса. Shop, CRM, MES
Основным соединяющим элементов всего потока данных в трейсинге будет orderId который генерируется при создании заказа.
Сопутсвующей информацией бедет  имя сервиса и стадия текущей обработки.  Это может быть смена статуса,передача на шину или сохранение в БД.
Дополнительно может потребоваться передача номера заказа при сохранении файла из конструктора в метод который сохранит эту связь.

«Мотивация». 
Наглядное отображение состояния заказа позволит  в кратчайшие сроки выявить его состояние  не проходя по базам данных или по логам всех систем что бы это понять.
Мы получаем оперативность получения сведений для клиента, наглядность поиска стадии заказа и время прохождения каждого узла для выявления и оптимизации узких мест.
           
«Предлагаемое решение».
 Будем использовать OpenTelemetry для сбора и Jaeger для отображения.
 На Java и C# есть поддержка  OpenTelemetry с помощью дополнительных библиотек и так можно будет отслеживать запись в БД и отправку в RabbitMQ.
 На схеме  у каждого блока API появится  отправка данных в хранилище трейсинга.
 
«Компромиссы». 
Дополнительно было бы удобно видеть в трейсинге  идентификатор пользователья совершивший вызов той или иной обработки заказа.
Пока пользователь не создал заказ , нет необходимости отслеживать его отдельные действия в трейсинге.

"Внедрение аутентификации"
 Зайти в систему смогут только сотрудники компании с актуальной учетной записью и ролью “Поддержка”».

Дополнительное задание.
 Автоматический мониторинг процесса прохождения заказа мог бы состоять из запроса разницы времени межд различными состояниями заказа и для каждой устанновлено своё пороговое значение при превышении которого срабоатывала бы нотификация поддержки. 
